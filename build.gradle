plugins {
	id 'application'
	id 'checkstyle'
	id 'pmd'
	id 'jacoco'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'com.gradle.build-scan' version '2.4.1'
	id 'org.springframework.boot' version '2.1.7.RELEASE'
	id 'org.owasp.dependencycheck' version '5.2.0'
	id 'com.github.ben-manes.versions' version '0.21.0'
    id 'io.freefair.lombok' version '3.8.0'
	id 'org.sonarqube' version '2.7.1'
	id 'idea'
	id 'java'
	id 'maven'
}

apply plugin: 'io.spring.dependency-management'

group = 'eu.flate.glc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

def webappDir = "$projectDir/src/main/webapp"
def webappOut = "$webappDir/dist"
def webappSrc = "$webappDir/src"
def webappModules = "$webappDir/node_modules"
def webappFiles = files(file("$webappDir/angular.json"),
		file("$webappDir/package.json"),
		file("$webappDir/package-lock.json"),
		file("$webappDir/tsconfig.app.json"),
		file("$webappDir/tsconfig.json"),
		file("$webappDir/tsconfig.spec.json"));

def webappTestFile = file("$webappDir/karma.conf.js")

tasks.withType(JavaCompile) {
	options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

repositories {
	maven { url 'https://repo.spring.io/milestone' }
	mavenCentral()
}

buildScan {
	termsOfServiceUrl = 'https://gradle.com/terms-of-service'
	termsOfServiceAgree = 'yes'
}

springBoot {
	mainClassName = 'eu.flate.glc.GameLibraryCurator'
}

dependencies {
		annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	implementation 'org.hamcrest:hamcrest-core'
	implementation 'org.projectlombok:lombok:1.18.6'
	implementation 'org.reactivestreams:reactive-streams'
	implementation "io.projectreactor.netty:reactor-netty:0.9.0.M2"
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.core:jackson-annotations'
	implementation 'org.springframework:spring-webflux'
	implementation 'org.springframework:spring-tx'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine'
}


sourceSets {
	main {
		resources {
			srcDirs = ["$webappOut", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "buildAngular"
	dependsOn "createPom"
}

task buildAngular(type: Exec) {
	// installAngular should be run prior to this task
	dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappSrc"
	inputs.files "$webappFiles"
	outputs.dir "$webappOut"
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP

	commandLine "ng", "build"
}

task installAngular(type: Exec) {
	workingDir "$webappDir"
	inputs.files "$webappFiles"
	outputs.dir "$webappModules"
	group = BasePlugin.BUILD_GROUP

	commandLine "yarn", "install"
}


task createPom {
	//noinspection GrUnresolvedAccess
	pom {
		//noinspection GroovyAssignabilityCheck
		project {
			//noinspection GrUnresolvedAccess
			groupId rootProject.group.toString()
			//noinspection GrUnresolvedAccess
			artifactId rootProject.name
			version rootProject.version.toString()

			//noinspection GrUnresolvedAccess
			inceptionYear '2019'
		}
	}.writeTo("pom.xml")
}
